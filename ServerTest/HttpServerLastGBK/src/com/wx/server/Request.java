package com.wx.server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 封装请求协议：封装请求参数为Map
 * @author Vincent
 *
 */
public class Request {

	private String requestInfo;	//协议信息
	private String method; 	//请求方式
	private String url; 	//请求url
	private String queryStr; 	//请求参数
	private Map<String, List<String>> parameterMap;
	private final String CRLF = "\r\n";

	
	public Request(Socket client) throws IOException {
		this(client.getInputStream());
	}
	public Request(InputStream is) {
		parameterMap = new HashMap<String,List<String>>();
		
		System.out.println(is);
		
		
		
		byte[] datas = new byte[1024*1024*1024];
		int len; 
		try {
			len = is.read(datas);
			this.requestInfo=  new String(datas, 0, len);
		} catch (IOException e) {
			e.printStackTrace();
			return ;
		} 
		
		//分解字符串
		parseRequestInfo();
	}
	
	private void parseRequestInfo() {
		System.out.println("----分解----");
		System.out.println("---- 1、获取请求方式：开头到第一个/ -----.");
		System.out.println("requestInfo-->"+requestInfo);
		this.method = this.requestInfo.substring(0, this.requestInfo.indexOf("/")).toLowerCase().trim();
		System.out.println("method-->" + this.method);
		System.out.println("---- 2、获取请求的URL:第一个/ 到HTTP/----");
		System.out.println("----可能包含请求参数？，前面为URL----");
		
		//1、获取/的位置
		int startIdx = this.requestInfo.indexOf("/") + 1;
		//2、获取HTTP/的位置
		int endIdx = this.requestInfo.indexOf("HTTP/"); 
		//3、分割字符串
		this.url = this.requestInfo.substring(startIdx, endIdx).trim();
		//4、就获取？的位置
		int quertIdx = this.url.indexOf("?");
		if(quertIdx >= 0) {
			String[] urlArray = this.url.split("\\?");
			this.url = urlArray[0];
			queryStr = urlArray[1];
		}
		
		System.out.println(this.url);
		System.out.println("---- 3、获取请求参数：如果Get已经获取，如果时post可能在请求体中----");

		if(method.equals("post"	)) {
			String qStr = this.requestInfo.substring(this.requestInfo.lastIndexOf(CRLF)).trim();
			if(null == queryStr) {
				queryStr = qStr;
			}else {
				queryStr += "&" +qStr;
			}
		}
		queryStr = null==queryStr ? "" :queryStr;
		System.out.println(method + "--> " + url + "--> " + queryStr);
		
		//转成Map fav=1&fav=2&uname=sha&age=18&others=
		convertMap();
	}
	
	// 处理请求参数为Map
	private void convertMap() {
		// 1、分割字符串 &
		String[] keyValues = this.queryStr.split("&");
		for(String queryStr : keyValues) {
			//2、再次分割字符串 =
			String [] kv = queryStr.split("=");
			kv = Arrays.copyOf(kv, 2);	//解决只有key,没有value的情况，保证永远有两个长度
			//获取key和vluae
			String key = kv[0];
			String value = kv[1]==null ? null : decode(kv[1], "UTF-8");	//处理中文
			//存放到map中
			if(!parameterMap.containsKey(key)) {	//表示第一次
				parameterMap.put(key, new ArrayList<String>());
			}
			parameterMap.get(key).add(value);
			
		}
		System.out.println("---------->"+parameterMap);
	}
	
	/**
	 * 处理中文
	 * @param value
	 * @return
	 */
	private String decode(String value, String enc) {
		try {
			return java.net.URLDecoder.decode(value, enc);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return null; 
	}
	
	
	/**
	 * 通过name获取对应的多个值
	 * @param key
	 * @return
	 */
	public String[] getParameterValues(String key) {
		List<String> values = this.parameterMap.get(key);
		if(null == values || values.size() <1) {
			return null; 
		}
		return values.toArray(new String[0]);
	}
	/**
	 * 通过name获取对应的一个值
	 * @param key
	 * @return
	 */
	public String getParameter(String key) {
		String [] values = getParameterValues(key);
		return values == null ? null :values[0];
	}
	
	
	public String getMethod() {
		return method;
	}

	public String getUrl() {
		return url;
	}

	public String getQueryStr() {
		return queryStr;
	}
	
	
}
